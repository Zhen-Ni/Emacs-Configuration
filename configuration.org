#+Title: Emacs Configuration

* Preparation
** Configuration Setup

This is the configuration file for my Emacs.

Some Emacs settings needs frequenctly modification, which are listed
in Table [[conf-table]] so that they can be changed easily. Other
configurations can also be modified by the emacs-lisp source code
blocks in this file.

#+CAPTION: General Configuration
#+NAME: conf-table
| Field              | Value   | Description                |
|--------------------+---------+----------------------------|
| font               | default |                            |
| font-size          | default | font height in units of pt |
| cjk-font           | default |                            |
| cjk-font-size      | default | font height in units of pt |
| python-interpreter | default | default for auto-detection |
| longitude          | 121     | calendar-longitude         |
| latitude           | 31      | calendar-latitude          |
| backup-dir         | default | backup directory           |

** Macro Definition

Get result from Table [[conf-table]].

#+begin_src emacs-lisp
  (defmacro get-conf! (key)
    "Access to value in conf-table."
      `(cadr (assoc ,key conf-table))
    )
  ;;(macroexpand-1 '(get-conf! "font"))
#+end_src

Run function silently.

#+begin_src emacs-lisp
  (defun silent-forward (func &rest args)
    "Run func with args while inhibiting its message display."
    (let ((inhibit-message t)
          (message-log-max nil))
      (apply func args)
      )
    )

  ;; The same as silent-forward using macro.
  (defmacro silent-forward!(&rest args)
    "Run func with args while inhibiting its message display."
    `(let ((inhibit-message t)
           (message-log-max nil))
       ,args
      )
    )

  ;; The following two statements are equal:
  ;; (silent-forward 'message "Message")
  ;; (silent-forward! message "Message")
  ;; To inspect into this macro, use macorexpand-1:
  ;; (macroexpand-1 '(message "Message"))
#+end_src

* Preference
** Personal Info

Set =user-full-name.=

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Zhen Ni")
#+END_SRC

** Package Management

Add melpa to package management system.

#+begin_src emacs-lisp
  ;; Added by Package.el. This must come before configurations
  ;; of installed packages. Don't delete this line. If you
  ;; don't want it, just comment it out by adding a semicolon
  ;; to the start of the line. You may delete these
  ;; explanatory comments.
  (require 'package)
  (add-to-list'package-archives
   ; Use official source or mirror from tsinghua university.
   ; '("melpa-stable" . "http://melpa.org/packages/")
   '("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
   t)
  (package-initialize)
#+end_src

** Startup Screen
*** Disable Builtin Startup Screen

Turn off the startup screen. Type =M-x display-about-screen= to
open it manually if you want.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** Use Dashboard

Make sure dashboard is installed.
#+begin_src emacs-lisp
  (use-package dashboard
	       :ensure t
	       )
#+end_src

#+begin_src emacs-lisp
  ; (require 'dashboard) ;; not necessray as use-package is used
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title "Nice day!")
  (setq dashboard-startup-banner 'official) ;; 也可以自定义图片
  (setq dashboard-items '(
                          (projects . 5)
                          (bookmarks . 5)  ;; number of listed bookmarks
                          (recents  . 5)  ;; number of listed recent files
                          )
        )
#+end_src

Provide a function =(dashboard)= to goto dashboard. See [[https://github.com/emacs-dashboard/emacs-dashboard/issues/236#issue-688633919][this link]]
for more details.

#+begin_src emacs-lisp
  (defun dashboard nil
    (interactive)
    (if (get-buffer "*dashboard*")
        (switch-to-buffer "*dashboard*")
        (dashboard-refresh-buffer))
    )
#+end_src

Use =<f5>= to refresh dashboard buffer.

#+begin_src emacs-lisp
  (add-hook 'dashboard-mode-hook
            (lambda () (local-set-key [f5]
                                      'dashboard-refresh-buffer)))
#+end_src

** Misc

Turn off the annoying bell.

#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

Replace yes-no answers with y-n.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

* Appearance
** Color Theme
*** COMMENT Set by Manually Specified Time

Set color theme by time. The theme is set to =tango= from 8:00
to 18:00, and set to =tango-dark= from 18:00 to 8:00. The code
is modified from [[https://stackoverflow.com/a/14760833/2731421][this answer on Github]].

#+begin_src emacs-lisp
  ;; See https://stackoverflow.com/a/14760833/2731421 for more
  ;; information.

  (setq current-theme nil)

  (defun synchronize-theme-helper (new-theme)
    "Set the current theme to new-theme."
    (if (equal current-theme new-theme) ()
      (disable-theme current-theme)
      (load-theme new-theme)
      (setq current-theme new-theme)
      ))

  (defun synchronize-theme ()
    "Set theme by time."
    (let ((hour (string-to-number
                 (substring (current-time-string) 11 13))))
      (if (member hour (number-sequence 8 17))
          (synchronize-theme-helper 'tango)
        (synchronize-theme-helper 'tango-dark)
        )
      ))

  ;; Although (run-with-timer) can set the theme automatically
  ;; after initializaion of emacs, we would like the set the
  ;; theme at startup before loading other packages like
  ;; org-indent mode so that these modes can corrently set the
  ;; style according to the active theme.
  (synchronize-theme)

  ;; Check every 10 minutes.
  (run-with-timer 0 600 'synchronize-theme)
#+end_src

*** Set by Sunrise and Sunset Time Automatically

Color theme is =tango= when sun rises and =tango-dark= when
sun sets.

#+begin_src emacs-lisp :var conf-table=conf-table
  (setq current-theme nil)

  (defun change-theme (new-theme)
    "Set the current theme to new-theme."
    (unless (equal current-theme new-theme)
      (disable-theme current-theme)
      (load-theme new-theme)
      (setq current-theme new-theme)
      ))

  (defun find-all (pattern string)
    ;; Reference: https://emacs.stackexchange.com/a/7150
    "Return a list of all regexp matches in a string."
    (reverse
    (let ((pos 0)
          matches)
      (while (string-match pattern string pos)
        (push (match-string 0 string) matches)
        (setq pos (match-end 0)))
      matches)))

  (defun minute-in-day (hour minute)
    "Get time in units of minute during a day."
    (+ (* hour 60) minute))

  ;; solar-setup
  (setq calendar-longitude (get-conf! "longitude"))
  (setq calendar-latitude (get-conf! "latitude"))

  (defun synchronize-theme ()
    "Set theme by time."
    (let ((time-str (cdr (find-all "[0-9]?[0-9]" (current-time-string))))
          (solar-str (find-all "[0-9]?[0-9]" (silent-forward! sunrise-sunset)))
          hour
          minute
          sunrise-hour
          sunrise-minute
          sunset-hour
          sunset-minute
          )
      (setq hour (string-to-number (pop time-str)))
      (setq minute (string-to-number (pop time-str)))
      (setq sunrise-hour (string-to-number (pop solar-str)))
      (setq sunrise-minute (string-to-number (pop solar-str)))
      (setq sunset-hour (+ (string-to-number (pop solar-str)) 12))
      (setq sunset-minute (string-to-number (pop solar-str)))
      (if (<  (minute-in-day sunrise-hour sunrise-minute)
              (minute-in-day hour minute)
              (minute-in-day sunset-hour sunset-minute))
          (change-theme 'tango)
        (change-theme 'tango-dark)
        )
      ))

  ;; Although (run-with-timer) can set the theme automatically
  ;; after initializaion of emacs, we would like the set the
  ;; theme at startup before loading other packages like
  ;; org-indent mode so that these modes can corrently set the
  ;; style according to the active theme.
  (synchronize-theme)

  ;; Check every minute.
  (run-with-timer 0 60 'synchronize-theme)
#+end_src

** Window Layouts

I'd like to turn off menu, tool and scroll bar.

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

+Show line numbers on the left of the window.+
#+begin_src emacs-lisp
  ;; (global-linum-mode t)
#+end_src

Window split threshold. If the width of the frame is less than
140, split horizontally, else split vertically.

#+begin_src emacs-lisp
  (setq split-width-threshold 140)
#+end_src

** Fonts

The settings of the fonts are provided in Table [[conf-table]]. On Linux
systems, The following code do nothing if font attribute are set to
"default". On Windows systems, The default font is set to "Consolas"
with size 110, and default cjk font is "微软雅黑" with size 22.

#+begin_src emacs-lisp :var conf-table=conf-table
  (let ((font (get-conf! "font"))
        (font-size (get-conf! "font-size"))
        (cjk-font (get-conf! "cjk-font"))
        (cjk-font-size (get-conf! "cjk-font-size"))
        )
    (when (eq 'windows-nt system-type)
      (if (equal font "default")
          (setq font "Consolas"))
      (if (equal font-size "default")
          (setq font-size 11))
      (if (equal cjk-font "default")
          (setq cjk-font "微软雅黑"))
      (if (equal cjk-font-size "default")
          (setq cjk-font-size 22))
      )
    (unless (equal font "default")
      (set-face-attribute 'default nil :font font)
      (set-face-attribute 'fixed-pitch nil :font font))
    (unless (equal font-size "default")
      (set-face-attribute 'default nil
                          :height (* font-size 10))
      (set-face-attribute 'fixed-pitch nil
                          :height (* font-size 10)))

  ;; Apply the setting only in a window system, as setting the
  ;; following fonts in terminal may fail.
  (if (window-system)
      (dolist (charset '(kana han cjk-misc bopomofo))
        (set-fontset-font
         (frame-parameter nil 'font)
         charset
         (font-spec
          :family (if (equal cjk-font "default")
                      nil cjk-font)
          :size (if (equal cjk-font-size "default")
                    nil cjk-font-size)
          )
         )
        )
    )
  )
#+end_src

** Troubleshooting
*** Window Size Issue

In X11 window, the default window size seems to be very
small. This might be a BUG, but easy to fix. The following
function also sets consistent window sizes for all systems.

#+begin_src emacs-lisp
  ;; Set window height and width.
  (setq default-frame-alist '((height . 32) (width . 80)))
#+end_src

* Editor
** Scrolling

Smooth scrolling.

#+begin_src emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
#+end_src

Preserve cursor point when scrolling.

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t)
#+end_src

** Multilingual Environment

Setting the languate environment to utf-8 to avoid some
encoding problems. For example, if not set, elpy do not work
well with windows system when utf-8 characters are used in
the buffer. Note that this setting might screw up some
language environments. See [[https://github.com/jorgenschaefer/elpy/issues/1729#issuecomment-558204483][github issue]].

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
#+end_src

Use "TeX" as default input method.

#+begin_src emacs-lisp
  (setq default-input-method "TeX")
#+end_src

** Default Modes
*** Built-in
**** Column Number Mode

Show column number on the bottom of the editor buffer.

#+begin_src emacs-lisp
  (column-number-mode 1)
#+end_src

**** Show Paren Mode

Show matching parentheses.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

**** Auto Revert Mode
Automatically revert buffer if its content is changed
somewhere else.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  ;; Also revert non-file buffers such as dired.
  (setq global-auto-revert-non-file-buffers t)
#+end_src

**** COMMENT Delete Selection Mode

+Delete the selected region if text entered.+ Disabled.

#+begin_src emacs-lisp
  ;; (delete-selection-mode t)
#+end_src

*** Recent Files

Exclude files in =~/.emacs.d/=.

#+begin_src emacs-lisp
  (add-to-list 'recentf-exclude ".emacs.d/")
#+end_src

Enable recentf mode and save recent opened files every 5 minutes.

#+begin_src emacs-lisp
  (recentf-mode t)
  (run-at-time (current-time) (* 5 60)
               (lambda () (silent-forward! recentf-save-list)))
#+end_src

*** Auto Complete

Use Company mode for auto-completion.

#+begin_src emacs-lisp
  ;; First make sure it is installed.
  (use-package company
    :ensure t
    )
  (global-company-mode 1)
#+end_src

*** Yasnippet

Always turn yasnippet mode on.

#+begin_src emacs-lisp
  ;; First make sure it is installed.
  (use-package yasnippet
    :ensure t
    )
  (yas-global-mode t)
#+end_src

*** Ivy, Swiper and Counsel

Do not enable the whole ivy mode as I just want to use a portion
of its funcitons. (to enable the whole ivy-mode, use =(ivy-mode
1)=)

#+begin_src emacs-lisp
  ;; First make sure it is installed.
  (use-package ivy :ensure t)
  (use-package swiper :ensure t)
  (use-package counsel :ensure t)
  ;; ivy virtual buffer
  (setq ivy-use-virtual-buffers t)
  ;; ivy mini buffer
  (setq enable-recursive-minibuffers t)
#+end_src

*** Projectile
Instructions for setting up projectile is given by its [[https://github.com/bbatsov/projectile][homepage]].

**** Installation
First make sure it is installed.
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t)
#+end_src

**** Enable Projectile and its Keymap

#+begin_src emacs-lisp
  (projectile-mode t)
  ;; Recommended keymap prefix on Windows/Linux
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

**** Ivy

Basically, ~ivy-mode~ is automatically enabled for projectile if it is
activated. However, we do not enable ivy in the global scope and need
to enable it manually following [[https://docs.projectile.mx/projectile/configuration.html#completion-options][this link]].

#+begin_src emacs-lisp
  (setq projectile-completion-system 'ivy)
#+end_src

*** Lsp
**** Installation
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t)
#+end_src
**** Highlight Text
Set the font of the highlight text where cursor points to.

#+begin_src emacs-lisp
  (set-face-attribute 'lsp-face-highlight-textual nil
                      :inherit nil :underline t :bold t)
  (set-face-attribute 'lsp-face-highlight-read nil
                      :inherit nil :underline t :bold t)
  (set-face-attribute 'lsp-face-highlight-write nil
                      :inherit nil :underline t :bold t)
#+end_src
**** Auto Guess Root

Automatically guess the project root using projectile/project. Do not
use this setting unless you are familiar with ~lsp-mode~ internals and
you are sure that all of your projects are following
~projectile/project.el~ conventions.

Refer to [[https://emacs-lsp.github.io/lsp-mode/page/settings/mode/#lsp-auto-guess-root][this link]] for more details.

#+begin_src emacs-lisp
  (setq lsp-auto-guess-root t)
#+end_src

**** Disable SignatuRe Help Documentation

Signature documentation sometimes makes the minibuffer too big when
coding. The [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][official website]] gives instructions for turning off such
features.

#+begin_src emacs-lisp
  (setq lsp-signature-render-documentation nil)
#+end_src

*** Marginalia

Marginalia in the minibuffer. [[https://github.com/minad/marginalia][Marginalia Homepage]].

#+begin_src emacs-lisp
  (use-package marginalia :ensure t)
  (marginalia-mode t)
#+end_src

*** Flycheck

Enable Flycheck mode by default.

#+begin_src emacs-lisp
  (use-package flycheck :ensure t)
  (global-flycheck-mode)
#+end_src

*** Rainbow

Rainbow mode by default.

#+begin_src emacs-lisp
  (use-package rainbow-mode :ensure t)
  (add-hook 'prog-mode-hook 'rainbow-mode)
#+end_src

*** POSTPONED Page Break Lines

Display ugly =^L= page breaks as tidy horizontal lines. It does not work
fine on Windows systems and I haven't work it out.

#+begin_src emacs-lisp
  (use-package page-break-lines :ensure t)
  (global-page-break-lines-mode)
  (set-fontset-font "fontset-default"
                    (cons page-break-lines-char page-break-lines-char)
                    (face-attribute 'default :family))
#+end_src

** Keybindings
*** Default Functoins

Upcase and downcase region.

#+begin_src emacs-lisp
  ;; C-x C-u
  (put 'upcase-region 'disabled nil)
  ;; C-x C-l
  (put 'downcase-region 'disabled nil)
#+end_src

*** Ivy, Counsel and Swiper

Key bindings for counsel. I just enable some of the key bindings
here.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
  (global-set-key (kbd "C-x B") 'counsel-switch-buffer-other-window)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-x C-y") 'counsel-yank-pop)
  ;;(define-key ivy-minibuffer-map (kbd "C-j") 'ivy-immediate-done)
#+end_src

*** Mwim

Move to the beginning/end of line, code or comment in a
better (?)  way. It should be mentioned that =M-m= is a
built-in shourtcut for navigating to the first
non-whitespace character on this line, which I think is
idential to =mwim-beginning-of-code=.

#+begin_src emacs-lisp
  (use-package mwim :ensure t)
  (autoload 'mwim-beginning-of-code "mwim" nil t)
  (autoload 'mwim-end-of-code "mwim" nil t)
  (global-set-key (kbd "M-g a") 'mwim-beginning-of-code)
  (global-set-key (kbd "M-g e") 'mwim-end-of-code)
  ;; (global-set-key (kbd "<home>") 'mwim-beginning-of-line-or-code)
  ;; (global-set-key (kbd "<end>") 'mwim-end-of-line-or-code)
#+end_src

*** Avy

Jump to text using a char-based decision tree. It's really
cool!

#+begin_src emacs-lisp
  (use-package avy :ensure t)
  (global-set-key (kbd "C-;") 'avy-goto-char)
  (global-set-key (kbd "C-'") 'avy-goto-line)
  (global-set-key (kbd "M-g l") 'avy-goto-line)
  (global-set-key (kbd "M-g w") 'avy-goto-word-1)
  (global-set-key (kbd "M-g k") 'avy-kill-region)
  (global-set-key (kbd "M-g y") 'avy-copy-region)  ; yank
  (global-set-key (kbd "M-g t") 'avy-move-region)  ; teleport
#+end_src

*** Ace Window

Bind =M-o= to use ace-window.

#+begin_src emacs-lisp
  (use-package ace-window :ensure t)
  (global-set-key (kbd "M-o") 'ace-window)
#+end_src

*** Multiple Cursors

[[https://github.com/magnars/multiple-cursors.el][Multiple cursors]] for Emacs.

#+begin_src emacs-lisp
  (use-package multiple-cursors :ensure t)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-?") 'mc/mark-all-dwim)
  (global-set-key (kbd "C-S-<mouse-1>") 'mc/toggle-cursor-on-click)
#+end_src

*** My Own Functions
**** Open New Line

Open a new line below or above the current one by using
=S-<enter>= and =C-S-<enter>=.

#+begin_src emacs-lisp
  (defun open-and-indent-line-below (&optional n)
    "Insert a newline below and indent and leave point after it.
  With arg N, insert and indent N newlines."
    (interactive "*p")
    (when (< (prefix-numeric-value n) 0)
      (error "Repetition argument has to be non-negative"))
    (beginning-of-line)
    (skip-syntax-forward " " (line-end-position))
    (let ((indent (current-column)))
      (end-of-line)
      (dotimes (i n)
        (newline)
        (indent-to indent)
        )
      (forward-line (- 1 n))
      (end-of-line)
      )
    )

  (defun open-and-indent-line-above (&optional n)
    "Insert a newline above and indent and leave point after it.
  With arg N, insert and indent N newlines."
    (interactive "*p")
    (when (< (prefix-numeric-value n) 0)
      (error "Repetition argument has to be non-negative"))
    (beginning-of-line)
    (skip-syntax-forward " " (line-end-position))
    (let ((indent (current-column)))
      (dotimes (i n)
        (beginning-of-line)
        (open-line 1)
        (indent-to indent)
        )
      (end-of-line)
      )
    )

  (global-set-key (kbd "S-<return>")
                  'open-and-indent-line-below)
  (global-set-key (kbd "C-S-<return>")
                  'open-and-indent-line-above)
#+end_src

**** Reversed Yank

Yank the previous kill. This is equivalent to =M-- M-y=.

#+begin_src emacs-lisp
    (defun yank-pop-reversed (&optional arg)
      "Replace the just-yanked stretch with a more recent kill.
    This is the reverse of builtin-function `yank-pop`, which
    replaces the previous yanked text with a more recent kill by
    default."
      (interactive "*p")
      (unless arg (setq arg 1))
      (yank-pop (- arg)))

    (global-set-key "\C-\M-Y" 'yank-pop-reversed)
#+end_src

** Backup Setting

Set the Backup directory. Different Directories are used for
Linux and Windows by default. The directory can be modified
by =conf-table=.

#+begin_src emacs-lisp :var conf-table=conf-table
  (let ((dir (get-conf! "backup-dir")))
    (if (equal dir "default")
        (progn
          (if (eq 'gnu/linux system-type)
              (setq dir "~/.emacs_backups/")
            )
          (if (eq 'windows-nt system-type)
              (setq dir "D:/App/Emacs/")
            )
          ))
    (setq backup-directory-alist `(("." . ,dir)))
    )
#+end_src

** Troubleshooting

In X11, <delete> works as backward delete, which should be forward
delete. I don't know whether it is a bug. But it is easy to work
around this issue.

#+begin_src emacs-lisp
  ;; Note that operating-system-release might be nil on windows,
  ;; which can not be argument of string-match-p.
  (if operating-system-release
      (if (string-match-p
           "microsoft-standard-WSL"
           operating-system-release)
          (global-set-key (kbd "<delete>") 'delete-forward-char)
        )
    )
#+end_src

* Major Modes
** Org Mode
*** Basic Setting

Start org-mode with all headers collapsed. The default
setting of Emacs minght be different on different
machines. So we set it here.

#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src

Wrap long lines in Org mode.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
#+end_src

Enable shift-select.

#+begin_src emacs-lisp
  (setq org-support-shift-select t)
#+end_src

Use Org-indent-mode. This mode also hides leading start in
org-mode by locally setting =org-hide-leading-stars= to =t=.
See [[https://orgmode.org/manual/Org-Indent-Mode.html][org mode manual]] for more details.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** Constants

#+begin_src emacs-lisp
  (setq org-table-formula-constants
        '(("π" . "3.14159265359")
          ("pi" . "3.14159265359")
          ("e" . "2.718281828459")
          ))
#+end_src

*** Apperance Setting
**** Character Display

Use utf-8 characters for display. Use "C-c C-x \" to toggle.

#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

Hide *, ~ and / in org text.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

**** COMMENT Hide Leading Stars

+Hide the verbose leading stars before headlines.+
This feature is automatically enabled by =org-indent-mode=.

#+begin_src emacs-lisp
  (setq org-hide-leading-stars t)
#+end_src

**** Org Superstar

Use Org superstar mode.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

**** Org Ellipsis Style

I'd like something fancy instead of the ellipsis (...) that org
displays when there's staff under a header. The arrow symbol is
found from [[https://unicode-table.com/en/sets/arrow-symbols/][Unicode Character Table]].
Due to the limitation of font set, this only works for the X11
window.

#+begin_src emacs-lisp
  (if (eq (window-system) 'x)
      (progn
        (setq org-ellipsis "..⤸")
        (set-face-underline 'org-ellipsis nil)
        (set-face-bold 'org-ellipsis t))
    )
#+end_src

*** "TODO" List Setting

Org mode keyword settings.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(i)"
                    "|"
                    "DONE(d)" "ABORT(a)" "POSTPONED(p)")))
  (setq org-todo-keyword-faces
        '(("TODO" . "red")
          ("DOING" . "orange")
          ("DONE" . "dark cyan")
          ("ABORT" . "dim grey")
          ("POSTPONED" . "dark magenta")))
#+end_src

*** Source Code Block Setting

Use the current window for editing source blocks (Press C-c ' in
source code block).

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Enable Python, C, C++ and D languages.

#+begin_src emacs-lisp
  ;; Enable Python.
  (org-babel-do-load-languages 'org-babel-load-languages
  '((python . t)))
  ;; Enable C, C++ and D.
  (org-babel-do-load-languages 'org-babel-load-languages
  '((C . t)))
  ;; Enable latex.
  (org-babel-do-load-languages 'org-babel-load-languages
  '((latex . t)))
#+end_src

Run these codes without prompting.

#+begin_src emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("C" "C++" "python" "emacs-lisp")))
    )
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

*** Export

Do not re-execute the source code blocks during export.

#+begin_src emacs-lisp
  (setq org-export-babel-evaluate nil)
#+end_src

*** Troubleshooting
**** COMMENT Indentation

The source code block should presrve the source code's
indentation. That is, leave the whitespaces as it instead of
converting them to tabs. However, after editing the source code
block using =C-c '=, the source code block will be indented
automatically, and converts spaces to tabs. To disable this
behaviour, one solution is to disable the source code block from
automatically indent the codes. The following code works by
cancelling all indents of source code blocks: ~(setq
org-src-preserve-indentation nil)~. However, this is not what we
want as we need an organized structure which indents
correctly. Another workaround is to disable the =indent-tab-mode= in
=org-mode=, which forces =org-mode= to use spaces for indentation. The
drawback of this solution is all leading tabs will become
whitespaces. And to insert tab in =org-mode=, press =C-q tab=.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
  (lambda () (setq indent-tabs-mode nil)))
#+end_src

**** Page-breaklines Mode Compability

Disable page-breaklines mode because it does not work with
org-indent-mode.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (page-break-lines-mode -1)))
#+end_src

**** Babel Python Interpreter

On windows systems, ob-python doesn't work well with the
default python interpreter when matplotlib is used to plot
figures. This is the same issue as that in python-mode, and
the solution is setting the default python interpreter to
=ipython= on windows.

#+begin_src emacs-lisp :var conf-table=conf-table
  ;; Use string= for string comparasion!
  ;; (eq "str" "str") returns nil.
  (let ((interpreter (get-conf! "python-interpreter")))
    (if (string= interpreter "default")
        (if (eq 'windows-nt system-type)
            (setq org-babel-python-command "ipython")
    )
    ;; Org babel mode.
    (setq org-babel-python-command interpreter))
  )
#+end_src

**** Hiding Leading Stars

The leading stars of the titles in =org-mode= are hided by
setting =org-hide-leading-starts= to =t=. This feature is
implemented by setting the font of leading starts to
=org-hide=, which has the same color as the
background. However, this color doesn't change when the
background color changes. Thus, the leading stars will show
in a different color when the theme changes.

The [[https://github.com/integral-dw/org-superstar-mode][homepage]] of =org-superstar-mode= gives a solution, which
solves the problem when =org-indent-mode= is disabled.

#+begin_src emacs-lisp
  ;; This is usually the default, but keep in mind it must be nil
  (setq org-hide-leading-stars nil)
  ;; This line is necessary.
  (setq org-superstar-leading-bullet ?\s)
  ;; If you use Org Indent you also need to add this, otherwise the
  ;; above has no effect while Indent is enabled.
  (setq org-indent-mode-turns-on-hiding-stars nil)
#+end_src

To hide the leading stars inserted by =org-indent-mode=, we
can set the foreground color of the leading stars to the
same as the background. We can automatically run this procedure
by function =advice-add= (see [[https://emacs.stackexchange.com/a/41250/38157][this stackexchange answer]]).

#+begin_src emacs-lisp
  (defun hide-org-indent-leading-stars (&optional theme)
    "Hide the leading stars generated by org-indent mode."
    (when (member 'org-indent (face-list))
    (set-face-attribute 'org-indent nil
                        :foreground (face-attribute 'default :background))
    ))
  (advice-add 'enable-theme :after #'hide-org-indent-leading-stars)
  (advice-add 'disable-theme :after #'hide-org-indent-leading-stars)
#+end_src

** Prog Mode

=prog-mode= is the base mode for programming.

Use hungry delete from c-mode by using prefix "C-c".

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda () (local-set-key
                        (kbd "C-c <backspace>")
                        'c-hungry-delete-backwards)))
  (add-hook 'prog-mode-hook
            (lambda () (local-set-key
                        (kbd "C-c <delete>")
                        'c-hungry-delete-forward)))
#+end_src

** Lisp Mode
*** Minor Mode Settings

Use rainbow-delimiters for lisp-like languages.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters :ensure t)
  (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'scheme-mode-hook 'rainbow-delimiters-mode)
  ;; The effect of rainbow delimiters is as follows:
  '(((((((((.)))))))))
#+end_src

*** Addin Funcitons

Use ~C-c C-c~ to eval region or buffer, depending on whether the
selected region is active.

#+begin_src emacs-lisp
  (defun eval-region-or-buffer ()
    "Evaluate the region if it is active, else eval the buffer."
    (interactive)
    (message "Evaluating region or buffer...")
    (if (and transient-mark-mode mark-active)
        (eval-region (region-beginning) (region-end))
      (eval-buffer))
    )

  (add-hook 'emacs-lisp-mode-hook
            (lambda () (local-set-key (kbd "\C-c\C-c")
                                      'eval-region-or-buffer)))
#+end_src

Press ~<f5>~ to save all buffers and run the region or buffer.

#+begin_src emacs-lisp
  (defun save-and-eval-region-or-buffer () (interactive)
         "Save all buffers, kill current python buffer and run
    current buffer or selection."
         (save-some-buffers '(4))
         (eval-region-or-buffer))
  (add-hook 'emacs-lisp-mode-hook
            (lambda () (local-set-key
                        (kbd "<f5>")
                        'save-and-eval-region-or-buffer)))
#+end_src

** Python Mode
*** Basic Settings
**** Use MELPA python-mode

Use melpa's python-mode.el to replace the built-in python-mode.

#+begin_src emacs-lisp
  (use-package python-mode :ensure t)
  ;; (require 'python-mode)
#+end_src

The keybindings of <backspace> and <delete> in melpa is
different from the built-in version, which causes
confusion. Here, we set the keybindings consistent with the
built-in version.

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook
            (lambda () (local-set-key
                        (kbd "<backspace>")
                        'python-indent-dedent-line-backspace)))
  (add-hook 'python-mode-hook
            (lambda () (local-set-key
                        (kbd "<delete>")
                        'delete-forward-char)))
  (add-hook 'python-mode-hook
            (lambda () (local-set-key
                        (kbd "C-<backspace>")
                        'backward-kill-word)))
#+end_src

The ~py-fill-paragraph~, which is binded to ~M-Q~ by setting
~fill-paragraph-function~ has weild behavior. We fall it back to
~python-mode~'s ~python-fill-paragraph~ instead.

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook
            (lambda () (set (make-local-variable
            'fill-paragraph-function) 'python-fill-paragraph)))


#+end_src

**** Use Elpy

Enable eply mode for Python.

#+begin_src emacs-lisp
  (use-package elpy :ensure t)
  (elpy-enable)
#+end_src

Disable virtualenv

#+begin_src emacs-lisp
  (setq elpy-rpc-virtualenv-path 'current)
#+end_src

**** COMMENT Use LSP
+Use lsp-mode. (experimental)+
Currently, elpy works better with python.

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'lsp)
#+end_src

*** Minor Mode Settings

The flymake mode is turned on by default in elpy. But we use
flycheck mode in python. So, turn it off.

#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook (lambda () (flymake-mode -1)))
#+end_src

Specify flycheck checkers for python.

#+begin_src emacs-lisp
  (flycheck-add-next-checker 'python-flake8 'python-mypy)
#+end_src

Specify a cache directory for mypy. Different cache directories
are used for Linux and windows systems.

#+begin_src emacs-lisp
  (if (eq 'gnu/linux system-type)
      ;; For Linux system.
      (setq flycheck-python-mypy-cache-dir "/home/collie/.emacs_backups/.mypy_cache/")
    ;; For Windows system.
    (setq flycheck-python-mypy-cache-dir "D:/App/Emacs/.mypy_cache/")
    )
#+end_src

*** Key Bindings

Press <f9> to run the whole buffer or the selected region.

#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook
            (lambda ()
              (local-set-key [f9] "\C-u\C-c\C-c")))
#+end_src

Press C-<f9> to kill the current python buffer and run the whole
buffer.

#+begin_src emacs-lisp
  (defun python-rerun () (interactive)
         "Kill python shell and run current buffer or selection."
         (elpy-shell-kill) (elpy-shell-send-region-or-buffer '(4))
         )
  (add-hook 'elpy-mode-hook
            (lambda () (local-set-key (kbd "C-<f9>")
                                      'python-rerun)))
#+end_src

Press <f5> to save all files, run the whole buffer or the selected
region.

#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook (lambda () (local-set-key
    [f5] (kbd "C-u C-x s C-u C-c C-c"))))
#+end_src

Press C-<f5> to save all files, kill the current python buffer and
run the whole buffer or the selected region.

#+begin_src emacs-lisp
  (defun python-save-and-rerun () (interactive)
         "Save all buffers, kill current python buffer and run
  current buffer or selection."
         (save-some-buffers '(4)) (elpy-shell-kill)
         (elpy-shell-send-region-or-buffer '(4)))
  (add-hook 'elpy-mode-hook
            (lambda () (local-set-key
                        (kbd "C-<f5>")
                        'python-save-and-rerun)))
#+end_src

*** Addin Functions
**** Autopep8

Automatically formats Python code to conform the PEP 8 style
guide. To use this function in Python mode, press =M-x
autopep8=. The following code is inspired by [[https://gist.github.com/whirm/6122031][auto pep8 example]].

#+begin_src emacs-lisp
  ;; See https://gist.github.com/whirm/6122031 for reference.
  (defun autopep8 ()
    "Formats python code to conform the the PEP 8 style guide."
    (interactive)
    (cl-assert (eq major-mode 'python-mode) nil
               "can only use autopep8 in python-mode")
    (let ((orig-point (point)))
      (shell-command-on-region (point-min) (point-max)
                               "autopep8 - "
                               nil t)
      (python-mode)			; Revert highlights.
      (goto-char orig-point)
      )
    )
#+end_src

*** Troubleshooting
**** Capabality with Matplotlib on Windows Machines
The Python interpreter doesn't work with matplotlib in emacs
environment on Window systems. Setting the interpreter to IPython
solves the issue. Thus, the Python interpreter is set to IPython
on windows by default. You can also specify the interpreter manually
by setting ~python-interpreter~ in Table [[conf-table]].

#+begin_src emacs-lisp :var conf-table=conf-table
  ;; Use string= for string comparasion!
  ;; (eq "str" "str") returns nil.
  (let ((interpreter (get-conf! "python-interpreter")))
    (if (string= interpreter "default")
        (if (eq 'windows-nt system-type)
            (setq python-shell-interpreter "ipython")
          )
      (setq python-shell-interpreter interpreter)
      )
    )
#+end_src

**** Multilingual Environment

Elpy do not work well with windows system when utf-8
characters are used in the buffer. Using
=(set-language-environment "UTF-8")= solves the problem if the
path of the source code file is ASCII encoded. See this [[https://github.com/jorgenschaefer/elpy/issues/1729#issuecomment-558204483][github
issue]].

#+begin_src emacs-lisp
  (setenv "PYTHONIOENCODING" "utf-8")
  (add-to-list 'process-coding-system-alist
               '("elpy" . (utf-8 . utf-8)))
  (add-to-list 'process-coding-system-alist
               '("python" . (utf-8 . utf-8)))
  (add-to-list 'process-coding-system-alist
               '("flake8" . (utf-8 . utf-8)))
#+end_src

**** Flycheck Issues

Flycheck has the following problems on the windows system:
- The executable of flake8 checker should be manually specified.
- The flycheck calls mypy whenever the python buffer is modified
  which significantly slows down the whole buffer.

  Thus, the following code is necessary on windows emacs to resolve
  the issue.
  #+begin_src emacs-lisp
    (when (eq 'windows-nt system-type)
      (setq flycheck-python-flake8-executable "flake8")
      (setq flycheck-check-syntax-automatically
            '(save idle-change mode-enabled))
      ;; Set delay based on what suits you the best
      (setq flycheck-idle-change-delay 4)
      )
  #+end_src
**** Lsp Issue

=lsp-find-definition= may be very slow or even time out when
processing python files on Linux. A similar problem can be
found on [[https://emacs.stackexchange.com/a/68748/38157][stackexchange]] and may be solved by disable lsp's
file watcher. However, in Python-mode, it seems to be a
problem realated to the performance of mypy checker. I'm not
sure about it, and haven't found a solution.

#+begin_src emacs-lisp
  ;(setq lsp-enable-file-watchers nil)
#+end_src

**** MELPA's Python-mode and Elpy's compability Issue

If MELPA's ~python-mode~ is loaded before first calling ~(elpy-enable)~,
some features of ~python-mode~ will be suppressed. We can reload MELPA's
~python-mode~ to fix it. (I've found this problem on my Linux
installation.

#+begin_src emacs-lisp
  ;; (require 'python-mode) only loads the package the first time it is called
  ;; (load "python-mode") always reloads the package
  (load "python-mode")
#+end_src

** C++ Mode
*** Basic Settings

Use ~C++-mode~ for ~.h~ files.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src

Use ~cpp-mode~ as name alias for ~c++-mode~.

#+begin_src emacs-lisp
  (defalias 'cpp-mode 'c++-mode)
#+end_src

*** Indentation

Use space for indentation.

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
  (add-hook 'c++-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
#+end_src

Do not indent namespace in c++ mode.

#+begin_src emacs-lisp
  (defun cancel-c++-namespace-indentation ()
    (c-set-offset 'innamespace [0]))
  (add-hook 'c++-mode-hook 'cancel-c++-namespace-indentation)
#+end_src

*** Lsp
**** Use lsp-mode

Use lsp-mode.

#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook 'lsp)
  (add-hook 'c-mode-hook 'lsp)
#+end_src

**** COMMENT Spell Check

The lsp-mode will use its own lsp-checker for flycheck. Here we
disable this behaviour so that it uses c/c++-clang as its
default checker.

#+begin_src emacs-lisp
  (setq lsp-diagnostic-package :none)
#+end_src

**** Work with TRAMP

Enable lsp-mode when editing remote files. See [[https://github.com/syl20bnr/spacemacs/issues/13925][Gibhub topic]] and
[[https://emacs-lsp.github.io/lsp-mode/page/remote/][official website]] for more information.

#+begin_src emacs-lisp
  (with-eval-after-load 'lsp-mode
    (lsp-register-client
     (make-lsp-client
      :remote? t
      :new-connection (lsp-tramp-connection "clangd")
      :major-modes '(c-mode c++-mode)
      :server-id 'clangd-remote)))
#+end_src

** Rust Mode
*** Basic settings
**** Use LSP
#+begin_src emacs-lisp
(add-hook 'rust-mode-hook #'lsp)
#+end_src

**** Indentation
Use space for indentation.
#+begin_src emacs-lisp
  (add-hook 'rust-mode-hook
             (lambda () (setq indent-tabs-mode nil)))
#+end_src

*** Minor Mode Settings
**** Flycheck
Flycheck for rust mode needs initializaion.

#+begin_src emacs-lisp
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

*** Addin Functions

Press ~<f5>~ to save all buffers and run command ~cargo-run~.

#+begin_src emacs-lisp
  (defun rust-save-and-run () (interactive)
         "Save all buffers, and run `rust-run`."
         (save-some-buffers '(4))
         (rust-run))
  (add-hook 'rust-mode-hook
            (lambda () (local-set-key
                        (kbd "<f5>")
                        'rust-save-and-run)))
#+end_src

** Inp Mode

Abaqus inp mode.

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/inp-mode")
  (require 'inp-mode)
  (add-to-list 'auto-mode-alist '("\\.inp\\'" . inp-mode))
#+end_src

* Not Only an Editor
** COMMENT Emacs Application Framework
Not fuly installed.
*** Setup
#+begin_src emacs-lisp
  (add-to-list 'load-path
               "~/.emacs.d/site-lisp/emacs-application-framework/")
  (require 'eaf)
  (require 'eaf-airshare)
  (require 'eaf-browser)
  (require 'eaf-camera)
#+end_src
